var tipuesearch = {"pages": [{'title': 'About', 'text': 'cmsite: wcms use  https://github.com/mdecycu/cmsimde  as submodule \n \n 我的倉儲: https://github.com/mdecp2022/site-kevingg601 \n 我的倉儲修改內容: https://github.com/mdecp2022/site-kevingg601/commits/main \n', 'tags': '', 'url': 'About.html'}, {'title': 'HW', 'text': '', 'tags': '', 'url': 'HW.html'}, {'title': 'w15', 'text': '1. 為何學習計算機程式需要建立個人倉儲 \n A:方便老師管理學生的課程網站 \n 2. 全球資訊網能夠提供什麼功能或有什麼優點 \n A:是一個透過網際網路存取的，由許多互相連結的超文字組成的資訊系統 \n 3. Replit, stud.cycu.org 與 localhost 分別代表甚麼? \n A:Replit 是使用Replit的網站進行改版(必須隨時上網) \n A:stud.cycu.org 跟Replit差不多(必須隨時上網) \n A:localhost 是使用可攜系統來開啟動態網站(只有在 push 時需要上網) \n 4. https, ssh 到底提供使用者那些功能或優點? \n A:https是一種網絡安全傳輸協議，可實現瀏覽器和網站服務器數據傳輸加密。 \n A:ssh是一種加密的網路傳輸協定，可在不安全的網路中為網路服務提供安全的傳輸環境。 \n 5. Brython 與 Python 有甚麼差別? \n \n A:Brython就是在瀏覽器中使用的Python \n \n \n \n 6. 能夠直接在瀏覽器中以 Brython 繪製中華民國國旗, 或模擬綠色方塊在方塊格點中任意移動, 代表甚麼? \n \n A:代表可以在網站上畫出2D圖形 \n \n \n 7. 變數, 字串, 整數, 浮點數, 數列, Tuple, Dictionary, 函式, 重複迴圈, class, 物件導向, 資料庫, 這些名詞對您而言代表甚麼? \n \n A:瞭解這些可以讓我做出一段可執行的程式 \n \n \n \n \n 2D動態繪圖練習 \n \n # 這個程式用於 demo 綠色方塊沿著特定網格路徑行走\n# 從 Brython 程式庫中的 browser 模組導入 document 類別, 並以簡寫設定為 doc\nfrom browser import document as doc\n# 從 browser 模組導入 html 類別, 主要用於建立 CANVAS 標註物件, 並插入頁面中\nfrom browser import html\n# 用於定時執行特定函式\nimport browser.timer\n# 導入亂數模組\nfrom random import random, randint\n\n# 利用 html 建立一個 CANVAS 標註物件, 與變數 canvas 對應\ncanvas = html.CANVAS(width = 600, height = 600)\n# 將 canvas 標註的 id 設為 "canvas"\ncanvas.id = "canvas"\n# 將 document 中 id 為 "brython_div" 的標註 \n# 設為與 brython_div 變數對應\nbrython_div = doc["brython_div1"]\n\n# 建立 buttons\nbrython_div <= html.BUTTON("啟動", id="power")\nbrython_div <= html.BR()\n\n# 將 canvas 標註放入 brython_div1 所在位置\n# 頁面中原本就已經放入 <div id="brython_div"></div> 標註\nbrython_div <= canvas\n# 將頁面中 id 為 canvas 的 CANVAS 設為與 canvas 變數對應\ncanvas = doc["canvas"]\n# 將 canvas 的 2d 繪圖 context 命名為 ctx\nctx = canvas.getContext("2d")\n\n# 建立一個 dRect() 函式\n# s default 為 1, c defaul 為紅色\ndef dRect(lux, luy, w, h, s=1, c=\'#ff0000\'):\n    ctx.lineWidth = s\n    ctx.strokeStyle = c\n    ctx.beginPath();\n    ctx.rect(lux, luy, w, h)\n    ctx.stroke();\n    \n# 建立畫直線函式\ndef draw_line(x1, y1, x2, y2, color="#ff0000"):\n    ctx.beginPath()\n    ctx.moveTo(x1, y1)\n    ctx.lineTo(x2, y2)\n    ctx.strokeStyle = color\n    ctx.stroke()\n\n# 建立 write Text 函式\ndef wText(x, y, t, s=14, c=\'#0000ff\'):\n    ctx.font = str(s) + "px Arial";\n    ctx.fillText(t, x, y)\n\n# 定義畫格線的函式\ndef grid(startx, starty, w, h, wnum, hnum, pixel=1, color="#ff0000"):\n    # 利用迴圈與座標增量繪圖\n    # 因為輸入 wnum 與 hnum 為格子數, 畫格線數則需加上 1\n    for i in range(wnum+1):\n        for j in range(hnum+1):\n            # 畫上下直線\n            yend = starty + h*(hnum)\n            xend = startx + w*(wnum)\n            x = startx + i*w\n            draw_line(x, starty, x, yend, color)\n            # 畫左右直線\n            y = starty + j*h\n            draw_line(startx, y, xend, y, color)\n            #wText(w/2-10, y-w/2, str(j))\n\n# 從兩個座標點求中心點座標\ndef center(lx, ly, rx, ry):\n    # lx is x coord of the left up corner\n    # rx is the x coord of th right down corner\n    x = (lx + rx)/2\n    y = (ly + ry)/2\n    return x, y\n    \n# 畫出填色方塊\ndef draw_rect(gx, gy, gw, gh, color="lime"):\n    # gx is the grid coord at x direction\n    # gy is the grid coord at y direction\n    # gw is the with of the green rect\n    # gh is the height of the green rect\n    lx = origx + (gx-1)*w\n    ly = origy + (gy-1)*h\n    rx = origx + gx*w\n    ry = origy + gy*h\n    cx, cy = center(lx, ly, rx, ry)\n    # glx is the x coord of the left corner\n    # gly is the y coord of the left corner\n    glx = cx - gw/2\n    gly = cy - gh/2\n    # 利用設定的顏色值畫出 rectangle\n    ctx.fillStyle = color\n    ctx.fillRect(glx, gly, gw, gh)\n\n# 以白色覆蓋位於 (nowx, nowy) \n# 且比目標方塊長寬各大於 1 pixel的方塊\ndef wipe():\n    draw_rect(nowx, nowy, 30+1, 30+1, color="white")\n\n# 畫出位於 (nowx, nowy) 的綠色方塊\ndef draw():\n    draw_rect(nowx, nowy, 30, 30, color="lime")\n\n# 繞著外圍行走\ndef walk():\n    global stepx, stepy\n    # 向下\n    if nowy < hnum and nowx == 1:\n        stepx = 0\n        stepy = 1\n    # 向右\n    elif nowx < wnum and nowy == hnum:\n        stepx = 1\n        stepy = 0\n    # 向上\n    elif nowy == hnum and nowx == wnum:\n        stepx = 0\n        stepy = -1\n    # 向左\n    elif nowx == wnum and nowy == 1:\n        stepx = -1\n        stepy = 0\n        \n# 每隔短暫時間即呼叫執行一次的函式\ndef game():\n    # 因 nowx 與 nowy 在函式外宣告\n    # 且在函式內改變對應值, 因此需宣告為 global\n    global nowx, nowy\n    walk()\n    wipe()\n    nowx += stepx\n    nowy += stepy\n    draw()\n\n# 將 anim 設為 None\nanim = None\n \ndef launchAnimation(ev):\n    global anim\n    # 初始啟動, anim 為 None\n    if anim is None:\n        # 每 0.08 秒執行一次 draw 函式繪圖\n        #anim = timer.set_interval(draw, 80)\n        anim = browser.timer.set_interval(game, 100)\n        # 初始啟動後, 按鈕文字轉為"暫停"\n        doc[\'power\'].text = \'暫停\'\n    elif anim == \'hold\':\n        # 當 anim 為 \'hold\' 表示曾經暫停後的啟動, 因此持續以 set_interval() 持續旋轉, 且將 power 文字轉為"暫停"\n        #anim = timer.set_interval(draw, 80)\n        anim = browser.timer.set_interval(game, 100)\n        doc[\'power\'].text = \'暫停\'\n    else:\n        # 初始啟動後, 使用者再按 power, 此時 anim 非 None 也不是 \'hold\', 因此會執行 clear_interval() 暫停\n        # 且將 anim 變數設為 \'hold\', 且 power 文字轉為"繼續"\n        #timer.clear_interval(anim)\n        browser.timer.clear_interval(anim)\n        anim = \'hold\'\n        doc[\'power\'].text = \'繼續\'\n        \n# 綠色方塊起點座標與 x 及 y 方向的座標增量\nnowx = 1\nnowy = 1\nstepx = 0\nstepy = 0\n# 設定格數\n# width 方向格子數\nwnum = 15\n# height 方向格子數\nhnum = 15\n# 設定線寬\npixel = 1\n# 設定 w 寬度\nw = int(canvas.width/wnum) - pixel\n# 設定 h 高度\nh = int(canvas.height/hnum) - pixel\n# 設定繪圖座標點起點位置\norigx = 1\norigy = 1\n# 利用 grid 函式畫出格線\ngrid(origx, origy, w, h, wnum, hnum, pixel=1, color="black")\n\ndoc["power"].bind("click", launchAnimation)\n#browser.timer.set_interval(game, 100) \n \n \n', 'tags': '', 'url': 'w15.html'}, {'title': 'w14', 'text': '第14週缺考名單 \n import ast\n\n# get stud_list first\n\ndef get_stud(c_name):\n    courses = {"1a": "0747", "1b": "0761", "2a": "0773", "2b": "0786"}\n    c = courses[c_name]\n    url = "https://nfu.cycu.org/?semester=1111&courseno=" + c + "&column=True"\n    data = open(url).read().split("\\n")\n    stud = data[:-1]\n    return stud\n    \ncp_stud = get_stud("1a")\n\n# 取得第14週考試的成績的url\ncp_w14_quiz_url = "https://gist.githubusercontent.com/mdecycu/9df4b372ac1b7386cf259ced15f1a2b2/raw/a48d36ae883bde8efd07b25bfddaed8f13200353/2022_1209_cp_w14_1a_quiz.json"\n\ndef get_score(url):\n    json_data = open(url).read()\n    big_dict = ast.literal_eval(json_data)\n    data = big_dict["body"]["testuser"]\n    quiz_dict = {}\n    for i in data:\n        stud_id = data[i]["user_name"]\n        stud_score = int(float(data[i]["total_score"]))\n        quiz_dict[stud_id] = stud_score\n    return quiz_dict\n    \ncp_quiz = get_score(cp_w14_quiz_url)\ncp_abs = []\nfor stud in cp_stud:\n    try:\n        print(stud, cp_quiz[stud])\n    except:\n        # 缺考者沒有 quiz 成績\n        print(stud, "缺")\n        cp_abs.append(stud)\n# 列出缺考名單\nprint("="*20)\nprint("以下為 w14 缺考名單:")\nfor stud in cp_abs:\n    print(stud) \n \n', 'tags': '', 'url': 'w14.html'}, {'title': 'w13', 'text': 'temp \n \'\'\'\nf =c*9/5 + 32\nc = (f-32)*5/9\n\'\'\'\nc = input("請輸入攝氏溫度")\n#print(type(c))\nc = float(c)\nprint("你輸入的攝氏溫度: " + str(c), "等於華氏溫度: " + str(c*9/5 +32)) \n 俄羅斯方塊 \n # from https://levelup.gitconnected.com/writing-tetris-in-python-2a16bddb5318\n# 改為可自動執行模式\nimport random\n# 以下為 Brython 新增\nfrom browser import document as doc\nfrom browser import html\nimport browser.timer\n\ndef intersects(game_field, x, y, game_width, game_height, game_figure_image):\n    intersection = False\n    for i in range(4):\n        for j in range(4):\n            if i * 4 + j in game_figure_image:\n                if i + y > game_height - 1 or \\\n                        j + x > game_width - 1 or \\\n                        j + x < 0 or \\\n                        game_field[i + y][j + x] > 0:\n                    intersection = True\n    return intersection\n\ndef simulate(game_field, x, y, game_width, game_height, game_figure_image):\n    while not intersects(game_field, x, y, game_width, game_height, game_figure_image):\n        y += 1\n    y -= 1\n\n    height = game_height\n    holes = 0\n    filled = []\n    breaks = 0\n    for i in range(game_height-1, -1, -1):\n        it_is_full = True\n        prev_holes = holes\n        for j in range(game_width):\n            u = \'_\'\n            if game_field[i][j] != 0:\n                u = "x"\n            for ii in range(4):\n                for jj in range(4):\n                    if ii * 4 + jj in game_figure_image:\n                        if jj + x == j and ii + y == i:\n                            u = "x"\n\n            if u == "x" and i < height:\n                height = i\n            if u == "x":\n                filled.append((i, j))\n                for k in range(i, game_height):\n                    if (k, j) not in filled:\n                        holes += 1\n                        filled.append((k,j))\n            else:\n                it_is_full = False\n        if it_is_full:\n            breaks += 1\n            holes = prev_holes\n\n    return holes, game_height-height-breaks\n\ndef best_rotation_position(game_field, game_figure, game_width, game_height):\n    best_height = game_height\n    best_holes = game_height*game_width\n    best_position = None\n    best_rotation = None\n\n    for rotation in range(len(game_figure.figures[game_figure.type])):\n        fig = game_figure.figures[game_figure.type][rotation]\n        for j in range(-3, game_width):\n            if not intersects(\n                    game_field,\n                    j,\n                    0,\n                    game_width,\n                    game_height,\n                    fig):\n                holes, height = simulate(\n                    game_field,\n                    j,\n                    0,\n                    game_width,\n                    game_height,\n                    fig\n                )\n                if best_position is None or best_holes > holes or \\\n                    best_holes == holes and best_height > height:\n                    best_height = height\n                    best_holes = holes\n                    best_position = j\n                    best_rotation = rotation\n    return best_rotation, best_position\n\n# 建立一個自動執行的函式\n# step 1\n\'\'\'\ndef run_ai():\n    game.rotate()\n\'\'\'\n#step 2\ndef run_ai(game_field, game_figure, game_width, game_height):\n    rotation, position = best_rotation_position(game_field, game_figure, game_width, game_height)\n    if game_figure.rotation != rotation:\n        game.rotate()\n    elif game_figure.x < position:\n        game.go_side(1)\n    elif game_figure.x > position:\n        game.go_side(-1)\n    else:\n        game.go_space()\n\n# 利用 html 建立一個 CANVAS 標註物件, 與變數 canvas 對應\ncanvas = html.CANVAS(width = 400, height = 500, id="canvas")\nbrython_div = doc["brython_div2"]\nbrython_div <= canvas\nctx = canvas.getContext("2d")\n\ncolors = [\n    (0, 0, 0),\n    (120, 37, 179),\n    (100, 179, 179),\n    (80, 34, 22),\n    (80, 134, 22),\n    (180, 34, 22),\n    (180, 34, 122),\n]\n\n\nclass Figure:\n    x = 0\n    y = 0\n\n    figures = [\n        [[1, 5, 9, 13], [4, 5, 6, 7]],\n        [[4, 5, 9, 10], [2, 6, 5, 9]],\n        [[6, 7, 9, 10], [1, 5, 6, 10]],\n        [[1, 2, 5, 9], [0, 4, 5, 6], [1, 5, 9, 8], [4, 5, 6, 10]],\n        [[1, 2, 6, 10], [5, 6, 7, 9], [2, 6, 10, 11], [3, 5, 6, 7]],\n        [[1, 4, 5, 6], [1, 4, 5, 9], [4, 5, 6, 9], [1, 5, 6, 9]],\n        [[1, 2, 5, 6]],\n    ]\n\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        self.type = random.randint(0, len(self.figures) - 1)\n        self.color = random.randint(1, len(colors) - 1)\n        self.rotation = 0\n\n    def image(self):\n        return self.figures[self.type][self.rotation]\n\n    def rotate(self):\n        self.rotation = (self.rotation + 1) % len(self.figures[self.type])\n\n\nclass Tetris:\n    level = 2\n    score = 0\n    state = "start"\n    field = []\n    height = 0\n    width = 0\n    x = 100\n    y = 60\n    zoom = 20\n    figure = None\n\n    def __init__(self, height, width):\n        self.height = height\n        self.width = width\n        self.field = []\n        self.score = 0\n        self.state = "start"\n        for i in range(height):\n            new_line = []\n            for j in range(width):\n                # 起始時每一個都填入 0\n                new_line.append(0)\n            self.field.append(new_line)\n\n    def new_figure(self):\n        self.figure = Figure(3, 0)\n\n    def intersects(self):\n        intersection = False\n        for i in range(4):\n            for j in range(4):\n                if i * 4 + j in self.figure.image():\n                    # block 到達底部, 左右兩邊界, 或該座標有其他 block\n                    if i + self.figure.y > self.height - 1 or \\\n                            j + self.figure.x > self.width - 1 or \\\n                            j + self.figure.x < 0 or \\\n                            self.field[i + self.figure.y][j + self.figure.x] > 0:\n                        intersection = True\n        return intersection\n\n    def break_lines(self):\n        lines = 0\n        for i in range(1, self.height):\n            zeros = 0\n            for j in range(self.width):\n                if self.field[i][j] == 0:\n                    zeros += 1\n            if zeros == 0:\n                lines += 1\n                for i1 in range(i, 1, -1):\n                    for j in range(self.width):\n                        self.field[i1][j] = self.field[i1 - 1][j]\n        self.score += lines ** 2\n\n    def go_space(self):\n        while not self.intersects():\n            self.figure.y += 1\n        self.figure.y -= 1\n        self.freeze()\n\n    def go_down(self):\n        self.figure.y += 1\n        if self.intersects():\n            self.figure.y -= 1\n            self.freeze()\n\n    def freeze(self):\n        for i in range(4):\n            for j in range(4):\n                if i * 4 + j in self.figure.image():\n                    self.field[i + self.figure.y][j + self.figure.x] = self.figure.color\n        self.break_lines()\n        self.new_figure()\n        if self.intersects():\n            self.state = "gameover"\n\n    def go_side(self, dx):\n        old_x = self.figure.x\n        self.figure.x += dx\n        if self.intersects():\n            self.figure.x = old_x\n\n    def rotate(self):\n        old_rotation = self.figure.rotation\n        self.figure.rotate()\n        if self.intersects():\n            self.figure.rotation = old_rotation\n\n# Define some colors\n# from https://stackoverflow.com/questions/3380726/converting-a-rgb-color-tuple-to-a-six-digit-code\nBLACK = \'#%02x%02x%02x\' % (0, 0, 0)\nWHITE = \'#%02x%02x%02x\' % (255, 255, 255)\nGRAY = \'#%02x%02x%02x\' % (128, 128, 128)\nRED = \'#%02x%02x%02x\' % (255, 0, 0)\n\ndone = False\nfps = 5\ngame = Tetris(20, 10)\ncounter = 0\n\npressing_down = False\n\ndef key_down(eve):\n    key = eve.keyCode\n    #if event.type == pygame.QUIT:\n    # 32 is pause\n    if key == 32:\n        done = True\n    # 82 is r key to rotate\n    if key == 82:\n        game.rotate()\n    # 40 is down key\n    if key == 40:\n        pressing_down = True\n    # 37 is left key\n    if key == 37:\n        game.go_side(-1)\n    # 39 is right key\n    if key == 39:\n        game.go_side(1)\n    # 68 is d key to move block to bottom\n    if key == 68:\n        game.go_space()\n    # 27 is escape\n    # reset the game\n    if key == 27:\n        # clear the previous score\n        ctx.fillStyle = WHITE\n        ctx.fillRect( 100, 0, 200, 50)\n        game.__init__(20, 10)\n\ndef key_up(eve):\n    key = eve.keyCode\n    # 40 is down key\n    if key == 40:\n        pressing_down = False\n\n#while not done:\ndef do_game():\n    global counter\n    if game.figure is None:\n        game.new_figure()\n    counter += 1\n    if counter > 100000:\n        counter = 0\n    if counter % (fps // game.level // 2) == 0 or pressing_down:\n        if game.state == "start":\n            game.go_down()\n            run_ai(game.field, game.figure, game.width, game.height)\n    \n    for i in range(game.height):\n        for j in range(game.width):\n            ctx.fillStyle = WHITE\n            #ctx.scale(game.zoom, game.zoom)\n            ctx.fillRect(game.x + game.zoom * j, game.y + game.zoom * i, game.zoom, game.zoom)\n            if game.field[i][j] > 0:\n                ctx.fillStyle = \'#%02x%02x%02x\' % colors[game.field[i][j]]\n                ctx.fillRect(game.x + game.zoom * j + 1, game.y + game.zoom * i + 1, game.zoom - 2, game.zoom - 1)\n            ctx.lineWidth = 1\n            ctx.strokeStyle = GRAY\n            ctx.beginPath()\n            ctx.rect(game.x + game.zoom * j, game.y + game.zoom * i, game.zoom, game.zoom)\n            ctx.stroke()\n    if game.figure is not None:\n        for i in range(4):\n            for j in range(4):\n                p = i * 4 + j\n                if p in game.figure.image():\n                    ctx.fillStyle = \'#%02x%02x%02x\' % colors[game.figure.color]\n                    ctx.fillRect(game.x + game.zoom * (j + game.figure.x) + 1,\n                                      game.y + game.zoom * (i + game.figure.y) + 1,\n                                      game.zoom - 2, game.zoom - 2)\n\n# score and Game Over scripts from https://s40723245.github.io/wcm2022\n    # 宣告文字的大小為36px\n    ctx.font = \'36px serif\'\n    # 宣告文字顏色為黑色\n    ctx.fillStyle = BLACK\n    # 將分數顯示在遊戲區上方, 座標為(10, 50), 並設定變數為text\n    ctx.fillText(\'Score:\'+ str(game.score), 10,50)\n    \n    # 宣告變數int = 1 ，如果分數大於int，則畫布清掉原本的分數填上新的得分分數\n    int = 1\n    if game.score >= int:\n        ctx.fillStyle = WHITE\n        ctx.fillRect( 100, 0, 200, 50)\n        ctx.fillStyle = BLACK\n        ctx.fillText(str(game.score), 108,50)\n    \n    # 如果遊戲狀態為gameover，顯示Game Over及Press ESC，並將文字設定為紅色\n    if game.state == "gameover":\n        ctx.fillStyle = RED\n        ctx.fillText("Game Over", 100, 200)\n        ctx.fillText("Press ESC", 105, 265)\n        ctx.fillStyle = WHITE\n        ctx.fillRect( 100, 0, 200, 50)\n        game.__init__(20, 10)\n\ndoc.addEventListener("keydown", key_down)\ndoc.addEventListener("keyup", key_up)\nbrowser.timer.set_interval(do_game, fps) \n \n', 'tags': '', 'url': 'w13.html'}, {'title': 'w12', 'text': '溫度轉換程式 \n # Brython 的 input() 可以接受輸入提示字串, 跳出瀏覽器輸入表單後, 將輸入內容以字串取回\nuser_input_temp = input("請輸入攝氏溫度值:")\n# 接著列出 user_input_temp 變數的資料型別\nprint(type(user_input_temp))\n# 到這裡已知利用 input() 函式將傳回字串, 接著以 float() 將字串轉為浮點數\nuser_input_temp = float(user_input_temp)\n# 因為攝氏溫度乘上 9/5 之後再加上 32 就可以得到對應的華氏溫度值\nFahrenheit = (user_input_temp*9/5) + 32\n# 到這裡, Fahrenheit 資料型別為浮點數, 而 user_input_temp 在第 8 行也轉為浮點數\n# 要將兩個浮點數與字串相加, 都必須透過 str() 轉為字串\nprint("攝氏 " + str(user_input_temp) + " 度, 等於華氏 " + str(Fahrenheit) + " 度.") \n \n 使用按鈕啟動 get_input \n \n  \n在動態網站頁面中啟用 Brython 執行環境的用法, 請注意動態網站執行所在路徑\n \n \n \n  啟動 Brython  \n \n \n  以下事先在頁面中加入 id="brython_div" 的 div 標註\n之後可利用 Brython 的 document 模組與此 html 標註對應\n \n \n  將直接執行的程式變成註解的 \n<script type="text/python">\nfrom browser import html, document\n# Brython 的 input() 可以接受輸入提示字串, 跳出瀏覽器輸入表單後, 將輸入內容以字串取回\nuser_input_temp = input("請輸入攝氏溫度值:")\n# 接著列出 user_input_temp 變數的資料型別\n# 但是在頁面中 Brython 的 print() 將會顯示在 log 而非頁面\nprint(type(user_input_temp))\n# 這裡定義一個 brython_div 變數, 透過 document[] 與頁面中 id="brython_div" 的位置對應\nbrython_div = document["brython_div"]\n# 看能不能直接將變數值字串列在標註 id 為 "brython_div" 的頁面位置\nbrython_div <= user_input_temp\n# 之後若要列出 html, 則需要透過 Brython 的 html 模組\n</script>\n \n 啟動下方程式的按鈕 \n \n \n \n \n 加上說明 \n <h3>w12</h3>\n<!-- \n在動態網站頁面中啟用 Brython 執行環境的用法, 請注意動態網站執行所在路徑\n-->\n<script src="./../cmsimde/static/brython.js"></script>\n<script src="./../cmsimde/static/brython_stdlib.js"></script>\n<!-- 啟動 Brython -->\n<p>\n<script>// <![CDATA[\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'/downloads/py/\']});\n}\n// ]]></script>\n<!-- 以下事先在頁面中加入 id="brython_div" 的 div 標註\n之後可利用 Brython 的 document 模組與此 html 標註對應\n--></p>\n<div id="brython_div"></div>\n<p>\n<script type="text/python">// <![CDATA[\nfrom browser import html, document\n# Brython 的 input() 可以接受輸入提示字串, 跳出瀏覽器輸入表單後, 將輸入內容以字串取回\nuser_input_temp = input("請輸入攝氏溫度值:")\n# 接著列出 user_input_temp 變數的資料型別\n# 但是在頁面中 Brython 的 print() 將會顯示在 log 而非頁面\nprint(type(user_input_temp))\n# 這裡定義一個 brython_div 變數, 透過 document[] 與頁面中 id="brython_div" 的位置對應\nbrython_div = document["brython_div"]\n# 看能不能直接將變數值字串列在標註 id 為 "brython_div" 的頁面位置\nbrython_div <= user_input_temp\n# 之後若要列出 html, 則需要透過 Brython 的 html 模組\n// ]]></script>\n</p> \n', 'tags': '', 'url': 'w12.html'}, {'title': 'w11', 'text': 'cp1a 第十週缺考名單 \n import ast\n\ndef get_stud(c_name):\n    courses = {"1a": "0747", "1b": "0761", "2a": "0773", "2b": "0786"}\n    c = courses[c_name]\n    url = "https://nfu.cycu.org/?semester=1111&courseno=" + c + "&column=True"\n    data = open(url).read().split("\\n")\n    stud = data[:-1]\n    return stud\n    \ncp_stud = get_stud("1a")\n\ncp_w10_quiz_url = "https://gist.githubusercontent.com/mdecycu/9df4b372ac1b7386cf259ced15f1a2b2/raw/9e8bf693a2805631aa12992db4d4f23e0f64e868/2022_1112_cp1a_w10_quiz.json"\n\ndef get_score(url):\n    json_data = open(url).read()\n    big_dict = ast.literal_eval(json_data)\n    data = big_dict["body"]["testuser"]\n    quiz_dict = {}\n    for i in data:\n        stud_id = data[i]["user_name"]\n        stud_score = int(float(data[i]["total_score"]))\n        quiz_dict[stud_id] = stud_score\n    return quiz_dict\n    \ncp_quiz = get_score(cp_w10_quiz_url)\ncp_abs = []\nfor stud in cp_stud:\n    try:\n        print(stud, cp_quiz[stud])\n    except:\n        # 缺考者沒有 quiz 成績\n        print(stud, "缺")\n        cp_abs.append(stud)\n# 列出缺考名單\nprint("="*20)\nprint("以下為 w10 缺考名單:")\nfor stud in cp_abs:\n    print(stud) \n \n', 'tags': '', 'url': 'w11.html'}, {'title': 'w10', 'text': '1 3 5 7 9 程式 \n for i in range(1,10,2):\n#從1開始一直加2，加到10    \n    print(i,end=" ") \n 心得:用簡單的程式做出數列，蠻有趣的。 \n', 'tags': '', 'url': 'w10.html'}, {'title': 'w6', 'text': '顯示學員靜態網頁 \n from browser import document, html\n\nbrython_div1 = document["brython_div1"]\n"""\nbrython_div1 <= html.BUTTON("hello")\nbrython_div1 <= html.BR()\nbrython_div1 <= html.A("google", href="https://google.com")\n"""\n\nurl = "https://mde.tw/studlist/2022fall/1a.txt"\ndata = open(url).read().split("\\n")\nmdecp2022 = "https://mdecp2022.github.io/site-"\ndata = data[1:-1]\nfor i in data:\n    stud = i.split("\\t")\n    stud_num = stud[0]\n    github_acc = stud[1]\n    #print(stud_num, github_acc)\n    if github_acc == "":\n        github_acc = stud_num\n    site = mdecp2022 + github_acc\n    link = html.A(stud_num, href=site)\n    brython_div1 <= link\n    brython_div1 <= html.BR() \n cp1a抽點程式 \n import random\ncp1a = "0747"\nurl = "https://nfu.cycu.org/?semester=1111&courseno=" + cp1a + "&column=True"\ndata = open(url).read().split("\\n")#用open()打開網站 再用read()讀取網站內容 用split(), 以 \\n 跳行符號分割#\nstud = data[:-1]\nrandom.shuffle(stud)\nnum = 5 #想要抽5個人#\nfor i in range(num):\n    print(stud[i]) \n \n', 'tags': '', 'url': 'w6.html'}, {'title': 'w5', 'text': "亂數產生器(4位數) \n import random\nimport string\n\ndef password_generator(size=4, chars=string.ascii_lowercase + string.digits):\n# string.ascii_lowercase 是小寫的a~z，string.digits 是0~9\n\n    return ''.join(random.choice(chars) for _ in range(size))\n\nfor i in range(10):\n    print(password_generator(4)) \n 心得:這樣以後要幾位數的密碼都沒問題了。", 'tags': '', 'url': 'w5.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation \n Variables \n Comments \n Numbers \n Strings \n print \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束 ', 'tags': '', 'url': 'Brython.html'}]};